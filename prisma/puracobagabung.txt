// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum VoteType {
  UP
  DOWN
}

model Subreddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String?
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

model User {
  id                String               @id @default(cuid())
  name              String?
  email             String?              @unique
  emailVerified     DateTime?
  username          String?              @unique
  image             String?
  // breddit
  createdSubreddits Subreddit[]          @relation("CreatedBy")
  subscriptions     Subscription[]
  votes             Vote[]
  Post              Post[]
  Comment           Comment[]
  CommentVote       CommentVote[]
  // pura
  pura              Pura[]
  upacara           Upacara[]
  kegiatan          Kegiatan[]
  peninggalan       Peninggalan[]
  pelinggih         Pelinggih[]
  userToken         User_refresh_token[]
  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id        String   @id @default(cuid())
  name      String
  price     Int
  createdAt DateTime @default(now())
}

model Banten {
  id     String  @id @default(cuid())
  nama   String?
  jumlah Int?
}

model Desa {
  id          String    @id @default(cuid())
  nama        String?
  kecamatanId String
  kecamatan   Kecamatan @relation(fields: [kecamatanId], references: [id])
  pura        Pura[]
}

model Kecamatan {
  id          String    @id @default(cuid())
  kabupatenId String
  nama        String
  desa        Desa[]
  kabupaten   Kabupaten @relation(fields: [kabupatenId], references: [id])
}

model Kabupaten {
  id         String      @id @default(cuid())
  provinsiId String
  nama       String
  kecamatan  Kecamatan[]
  provinsi   Provinsi    @relation(fields: [provinsiId], references: [id])
}

model Provinsi {
  id        String      @id @default(cuid())
  nama      String
  kabupaten Kabupaten[]
}

model Pura {
  id            String        @id @default(cuid())
  desaId        String
  desa          Desa          @relation(fields: [desaId], references: [id])
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  nama          String
  kategori      String
  sejarah       String
  tahun_berdiri DateTime
  tanggal_input DateTime
  fungsi        String
  alamat        String
  piodalan      String
  pengusung     String
  palebahan     String
  sesuhunan     String
  kode_foto     String
  upacara       Upacara[]
  kegiatan      Kegiatan[]
  peninggalan   Peninggalan[]
  pelinggih     Pelinggih[]
  pengurus      Pengurus[]
}

model Upacara {
  id               String   @id @default(cuid())
  puraId           String
  pura             Pura     @relation(fields: [puraId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  nama             String
  tanggal_mulai    DateTime
  tanggal_berakhir DateTime
  pamuput          String
  biaya            Int
  tanggal_input    DateTime
}

model Kegiatan {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  puraId           String
  pura             Pura     @relation(fields: [puraId], references: [id])
  nama             String
  keterangan       String
  tanggal_kegiatan DateTime
  tanggal_input    DateTime
}

model Peninggalan {
  id     String @id @default(cuid())
  puraId String
  pura   Pura   @relation(fields: [puraId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Pelinggih {
  id            String   @id @default(cuid())
  puraId        String
  pura          Pura     @relation(fields: [puraId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  nama          String
  fungsi        String
  sejarah       String
  tahun         DateTime
  kode_foto     String
  tanggal_input DateTime
}

model Pengurus {
  id          String   @id @default(cuid())
  puraId      String
  pura        Pura     @relation(fields: [puraId], references: [id])
  nama        String
  jabatan     String
  tahun_awal  DateTime
  tahun_akhir DateTime
  status      String
  telepon     String?
  kode_foto   String
}

model User_refresh_token {
  id           String   @id @default(cuid())
  refreshToken String   @db.VarChar(255)
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum VoteType {
  UP
  DOWN
}

enum UserRole {
  ADMIN
  // PENGEMPON
  PRAJURU
}

enum CategoryPura {
  KAWITAN
  SWAGINA
  KAHYANGAN_DESA
  KAHYANGAN_JAGAT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  alamat        String?
  telepon       String?
  role          UserRole  @default(PRAJURU)

  createdpuras  Pura[]         @relation("CreatedBy")
  subscriptions Subscription[]
  votes         Vote[]
  accounts      Account[]
  sessions      Session[]
  kegiatan      Kegiatan[]
  Comment       Comment[]
  CommentVote   CommentVote[]

  // pura
  upacara     Upacara[]
  pratima     Pratima[]
  pelinggih   Pelinggih[]
  userToken   User_refresh_token[]
  virtualTour VirtualTour[]
}

model Pura {
  id           String        @id @default(cuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  creatorId    String?
  konten       Json?
  tahunBerdiri Int?
  alamat       String?
  piodalan     String?
  kategori     CategoryPura?

  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  kegiatans   Kegiatan[]
  subscribers Subscription[]

  upacara     Upacara[]
  pratima     Pratima[]
  pelinggih   Pelinggih[]
  virtualTour VirtualTour[]

  @@index([name])
}

model Subscription {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  pura   Pura   @relation(fields: [puraId], references: [id])
  puraId String

  @@id([userId, puraId])
}

model Kegiatan {
  id              String    @id @default(cuid())
  title           String
  content         Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  authorId        String
  puraId          String
  tanggalKegiatan DateTime?

  pura     Pura      @relation(fields: [puraId], references: [id])
  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
  votes    Vote[]
}

model Comment {
  id         String   @id @default(cuid())
  text       String
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  kegiatan   Kegiatan @relation(fields: [kegiatanId], references: [id], onDelete: Cascade)
  kegiatanId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  kegiatan   Kegiatan @relation(fields: [kegiatanId], references: [id], onDelete: Cascade)
  kegiatanId String
  type       VoteType

  @@id([userId, kegiatanId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}

model Pratima {
  id               String   @id @default(cuid())
  nama             String
  konten           Json?
  puraId           String
  bahan            String
  jenis            String
  pura             Pura     @relation(fields: [puraId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  tahunPeninggalan Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Pelinggih {
  id               String   @id @default(cuid())
  puraId           String
  pura             Pura     @relation(fields: [puraId], references: [id])
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  nama             String
  konten           Json
  tahunPeninggalan Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  banten Banten[]
}

model User_refresh_token {
  id           String   @id @default(cuid())
  refreshToken String   @db.VarChar(255)
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model VirtualTour {
  id          String   @id @default(cuid())
  puraId      String
  pura        Pura     @relation(fields: [puraId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  virtualTour String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Banten {
  id          String    @id @default(cuid())
  pelinggihId String
  pelinggih   Pelinggih @relation(fields: [pelinggihId], references: [id])
  upacaraId   String
  upacara     Upacara   @relation(fields: [upacaraId], references: [id])
  nama        String
  konten      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Upacara {
  id        String   @id @default(cuid())
  puraId    String
  pura      Pura     @relation(fields: [puraId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  nama      String
  biaya     String
  konten    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  banten Banten[]
}
